#ifndef VEHICLE
#define VEHICLE

#include <vector>
#include <map>
#include <string>

using namespace std;


struct Trajectory
{
  // trajectory generated by JMT
  //an array of length 6, each value corresponding to a coefficent in the polynomial 
  // s(t) = a_0 + a_1 * t + a_2 * t**2 + a_3 * t**3 + a_4 * t**4 + a_5 * t**5
  vector<double> s; 
  vector<double> d; 
  double t; //time
};


class Vehicle {
public:

  double s;
  double s_d;
  double s_dd;
  double d;
  double d_d;
  double d_dd;
  string state; 
  vector<string> available_states;
  vector<double> start_state; // [s, s_d, s_dd, d, d_d,d_dd]
  vector<double> s_traj_coeffs, d_traj_coeffs;

  /**
  * Constructors
  */
  Vehicle();
  Vehicle(double s, double s_d, double s_dd, double d, double d_d, double d_dd);
  Vehicle(vector<double> start_state);

  /**
  * Destructor
  */
  virtual ~Vehicle();

  vector<double> state_in(double time);

  void update_available_states(bool car_to_left, bool car_to_right);

  vector<double> get_target_for_state(string state, vector<Vehicle> other_cars, double duration, bool car_just_ahead);

  vector<double> get_leading_vehicle_data_for_lane(int target_lane, vector<Vehicle> other_cars, double duration);

  Trajectory generate_traj_for_target(vector<double> target_state, double duration);


};

#endif